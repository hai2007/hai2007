#!/usr/bin/env node

'use strict';

/**
本工具主要是提供一些快捷功能，
方便日常开发或生活。
*/

process.title = 'hai2007-cli';

// 来自node包的资源
const nodejs = require('@hai2007/nodejs');
const inquirer = require('inquirer');

// 原生接口
const fs = require('fs');
const os = require("os");

// 本地资源
const pkg = require('../package.json');
const options = require('./options');

// 组装好缩写和全写的映射
let shortHands = {};
for (let key in options.config) {
    if (options.config[key].short) shortHands["-" + options.config[key].short] = "--" + key;
}

// 获取命令行参数
const parsed = nodejs.option(shortHands, process.argv);

const terminal = parsed.__terminal__[0];

// 如果是初始化一些快捷项目
if (terminal == 'create') {

    // 先获取参数
    inquirer.prompt([{
        type: 'input',
        name: 'name',
        message: '请输入项目名称',
        default: 'projectname'
    }, {
        type: 'input',
        name: 'description',
        message: '请输入项目描述',
        default: ''
    }, {
        type: 'rawlist',
        name: 'kind',
        message: '请选择打包工具',
        choices: ['webpack','etcpack'],
        default: 1
    }]).then(answers => {

        let sourcePath = nodejs.fullPath('../' + answers.kind, __dirname);
        let targetPath = nodejs.fullPath('./' + answers.name, process.cwd());

        // 复制项目到命令行所在位置
        nodejs.copySync(sourcePath, targetPath);

        // 修改项目参数
        for (let item of ["index.html", "package.json"]) {

            let targetFile = nodejs.fullPath('./' + answers.name + "/" + item, process.cwd());

            // 读取
            let fileContent = fs.readFileSync(targetFile, 'utf-8');

            // 替换内容
            fileContent = fileContent.replace('project-name-will-replace', answers.name);
            fileContent = fileContent.replace('project-description-will-replace', answers.description);

            // 写回
            fs.writeFileSync(targetFile, fileContent);

        }

    });

}

else if (terminal == 'network') {

    console.info(os.networkInterfaces());

}

else if (terminal == 'server') {

    nodejs.server({

        // 端口号
        port: (parsed.port && parsed.port[0]) ? parsed.port[0] : 8080,

        // 服务器根路径
        contentBase: process.cwd()

    });

}

// 否则
else {

    if ('version' in parsed) {

        // 打印版本号
        console.log(pkg.version);

    } else if ('help' in parsed) {

        let commandOption = options.command[parsed.help[0]];
        if (commandOption) {

            let configs = "";
            for (let item of commandOption.config) {
                configs += `【${options.config[item].info}】 ${options.config[item].demo}\n`;
            }

            let command = `
   【 ${commandOption.info}】 ${commandOption.demo}

    下面是可选的配置项：
    ${configs}
    `;

            console.log(command);
        } else {
            console.log(options.help);
        }

    } else {

        // 打印帮助信息
        console.log(options.help);

    }

}
